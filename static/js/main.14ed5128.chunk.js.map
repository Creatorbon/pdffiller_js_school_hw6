{"version":3,"sources":["components/Alert.js","hoc/withDelete.js","components/App.js","hoc/withPortal.js","serviceWorker.js","index.js"],"names":["Alert","_ref","message","react_default","a","createElement","className","role","type","data-dismiss","aria-label","aria-hidden","withDelete","delay","Component","_React$Component","WithDelete","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","isVisible","inherits","createClass","key","value","_this2","setTimeout","setState","props","React","domElem","WithPortal","ReactDOM","createPortal","withPortal","document","getElementById","PureAlert","AlertWithDelete","App","alerts","refForInput","createRef","handleChange","event","target","handleSubmit","preventDefault","_this$state","toConsumableArray","current","focus","onSubmit","onChange","ref","placeholder","disabled","Fragment","map","elem","index","Boolean","window","location","hostname","match","render","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14ed5128.chunk.js","sourcesContent":["import React from 'react';\n\nconst Alert = ({ message }) => (\n  <div className=\"row justify-content-center\">\n    <div className=\"alert alert-success col-lg-5\" role=\"alert\">\n      {message}\n      <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  </div>\n);\n\nexport default Alert;\n","import React from 'react';\n\nconst withDelete = delay => (Component) => {\n    class WithDelete extends React.Component {\n        state = {\n            isVisible: true\n        };\n\n        componentDidMount() {\n            setTimeout(() => {\n                this.setState({\n                    isVisible: false\n                })\n            }, delay)\n        }\n\n        render() {\n            const { isVisible } = this.state;\n            if (isVisible)\n                return <Component {...this.props} />;\n            else return null\n        }\n    }\n\n    return WithDelete;\n};\n\nexport default withDelete;","import React from 'react';\nimport PureAlert from './Alert';\nimport withPortal from \"../hoc/withPortal\";\nimport withDelete from '../hoc/withDelete';\n\nconst DELAY = 2000;\nconst alertsListContainer = document.getElementById('alert-list');\n\nconst Alert = withPortal(alertsListContainer)(PureAlert);\nconst AlertWithDelete = withDelete(DELAY)(Alert)\n\nclass App extends React.Component {\n  state = {\n    value: \"\",\n    alerts: [],\n  }\n\n  refForInput = React.createRef();\n\n  handleChange = event => {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { value, alerts } = this.state;\n    if (value) {\n      this.setState({\n        alerts: [...alerts, value]\n      })\n    }\n    this.setState({ value: \"\" });\n    this.refForInput.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-center\" >\n          <form className=\"input-group col-lg-5\" onSubmit={this.handleSubmit}>\n            <input onChange={this.handleChange} value={this.state.value} ref={this.refForInput} className=\"form-control form-control-lg\" type=\"text\" placeholder=\"Type allert message here\" />\n            <input type=\"submit\" value=\"Add allert\" className=\"btn btn-secondary btn-lg\" disabled={!this.state.value} />\n          </form>\n        </div>\n        <>\n          {this.state.alerts.map((elem, index) => (\n            <AlertWithDelete key={index} message={elem} />\n          ))}\n        </>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst withPortal = domElem => (Component) => {\n  class WithPortal extends React.Component {\n    render() {\n      return ReactDOM.createPortal(<Component {...this.props} />, domElem);\n    }\n  }\n  return WithPortal;\n};\n\nexport default withPortal;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}