{"version":3,"sources":["Alert.js","AlertsList.js","App.js","withPortal.js","serviceWorker.js","index.js"],"names":["Alert","_ref","message","react_default","a","createElement","className","role","type","data-dismiss","aria-label","aria-hidden","AlertsList","alerts","Fragment","map","elem","index","src_Alert","key","id","domElem","Component","_React$Component","WithPortal","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","ReactDOM","createPortal","props","React","withPortal","document","getElementById","App","state","refForInput","createRef","handleChange","event","_this","setState","target","console","log","handleSubmit","preventDefault","_this$state","concat","toConsumableArray","current","focus","onSubmit","onChange","ref","placeholder","disabled","App_Alert","Boolean","window","location","hostname","match","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAaeA,SAXD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BC,KAAK,SAChDL,EACDC,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,QAAQG,eAAa,QAAQC,aAAW,SACtEP,EAAAC,EAAAC,cAAA,QAAMM,cAAY,QAAlB,aCIOC,EARI,SAAAX,GAAA,IAAGY,EAAHZ,EAAGY,OAAH,OACjBV,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA,KACGD,EAAOE,IAAI,SAACC,EAAMC,GAAP,OACVd,EAAAC,EAAAC,cAACa,EAAD,CAAOC,IAAKH,EAAMd,QAASc,EAAMI,GAAIH,QCCrCjB,ECJa,SAAAqB,GAAO,OAAI,SAACC,GAM7B,OAN2C,SAAAC,GAAA,SAAAC,IAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAD,EAAAD,GAAAE,OAAAQ,EAAA,EAAAR,CAAAD,EAAA,EAAAL,IAAA,SAAAe,MAAA,WAGvC,OAAOC,IAASC,aAAajC,EAAAC,EAAAC,cAACiB,EAAcK,KAAKU,OAAWhB,OAHrBG,EAAA,CAClBc,IAAMhB,YDGnBiB,CAFcC,SAASC,eAAe,cAEtCF,CAAgC3B,GA6C/B8B,6MA1CbC,MAAQ,CACNT,MAAO,GACPrB,OAAQ,MAGV+B,YAAcN,IAAMO,cAEpBC,aAAe,SAAAC,GACbC,EAAKC,SAAS,CACZf,MAAOa,EAAMG,OAAOhB,QAEtBiB,QAAQC,IAAIJ,EAAKL,UAGnBU,aAAe,SAAAN,GACbA,EAAMO,iBADgB,IAAAC,EAEIP,EAAKL,MAAvBT,EAFcqB,EAEdrB,MAAOrB,EAFO0C,EAEP1C,OACXqB,GACFc,EAAKC,SAAS,CACZpC,OAAM,GAAA2C,OAAA/B,OAAAgC,EAAA,EAAAhC,CAAMZ,GAAN,CAAcqB,MAGxBc,EAAKC,SAAS,CAAEf,MAAO,KACvBc,EAAKJ,YAAYc,QAAQC,QACzBR,QAAQC,IAAIJ,EAAKL,gFAIjB,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAuBsD,SAAUjC,KAAK0B,cACpDlD,EAAAC,EAAAC,cAAA,SAAOwD,SAAUlC,KAAKmB,aAAcZ,MAAOP,KAAKgB,MAAMT,MAAO4B,IAAKnC,KAAKiB,YAAatC,UAAU,+BAA+BE,KAAK,OAAOuD,YAAY,6BACrJ5D,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAAS0B,MAAM,aAAa5B,UAAU,2BAA2B0D,UAAWrC,KAAKgB,MAAMT,UAGvG/B,EAAAC,EAAAC,cAAC4D,EAAD,CAAOpD,OAAQc,KAAKgB,MAAM9B,iBArChByB,IAAMhB,WEGJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNnC,IAASoC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAAShC,SAASC,eAAe,SDsH3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f1a9db2f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Alert = ({ message }) => (\n  <div className=\"row justify-content-center\">\n    <div className=\"alert alert-success col-lg-5\" role=\"alert\">\n      {message}\n      <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  </div>\n);\n\nexport default Alert;\n","import React from 'react';\nimport Alert from './Alert';\n\nconst AlertsList = ({ alerts }) => (\n  <>\n    {alerts.map((elem, index) => (\n      <Alert key={elem} message={elem} id={index} />\n    ))}\n  </>\n);\n\nexport default AlertsList;\n","import React from 'react';\nimport './App.css';\nimport AlertsList from './AlertsList';\nimport withPortal from \"./withPortal\";\n\nconst alertsListContainer = document.getElementById('alert-list');\n\nconst Alert = withPortal(alertsListContainer)(AlertsList);\n\nclass App extends React.Component {\n  state = {\n    value: \"\",\n    alerts: [],\n  }\n\n  refForInput = React.createRef();\n\n  handleChange = event => {\n    this.setState({\n      value: event.target.value\n    });\n    console.log(this.state)\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { value, alerts } = this.state;\n    if (value) {\n      this.setState({\n        alerts: [...alerts, value]\n      })\n    }\n    this.setState({ value: \"\" });\n    this.refForInput.current.focus();\n    console.log(this.state)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-center\" >\n          <form className=\"input-group col-lg-5\" onSubmit={this.handleSubmit}>\n            <input onChange={this.handleChange} value={this.state.value} ref={this.refForInput} className=\"form-control form-control-lg\" type=\"text\" placeholder=\"Type allert message here\" />\n            <input type=\"submit\" value=\"Add allert\" className=\"btn btn-secondary btn-lg\" disabled={!this.state.value}/>\n          </form>\n        </div>\n        <Alert alerts={this.state.alerts}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst withPortal = domElem => (Component) => {\n  class WithPortal extends React.Component {\n    render() {\n      return ReactDOM.createPortal(<Component {...this.props} />, domElem);\n    }\n  }\n  return WithPortal;\n};\n\nexport default withPortal;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}